language: rust
sudo: false

matrix:
  include:
    - rust: 1.32.0
      env: DESCRIPTION="Linux, 1.32.0"
      os: linux

    - rust: 1.32.0
      env: DESCRIPTION="OSX, 1.32.0"
      os: osx

    - rust: stable
      env: DESCRIPTION="Linux, stable"

    - rust: stable
      env: DESCRIPTION="OSX+iOS, stable"
      os: osx
      install:
        - rustup target add aarch64-apple-ios
      script:
        - cargo test
        - cargo test --examples
        - cargo build --target aarch64-apple-ios

    - rust: beta
      env: DESCRIPTION="Linux, beta"

    - rust: stable
      env: DESCRIPTION="Rustfmt"
      install:
        - rustup component add rustfmt
      script:
        - cargo fmt --all -- */*.rs --check

    - rust: nightly
      os: linux
      env: DESCRIPTION="Linux, nightly, docs"
      install:
        - cargo --list | egrep "^\s*deadlinks$" -q || cargo install cargo-deadlinks
        - cargo deadlinks -V
      script:
        - cargo test
        - cargo test --benches
        - cargo test --examples
        # remove cached documentation, otherwise files from previous PRs can get included
        - rm -rf target/doc
        - cargo doc --no-deps --all --features=std,log
        - cargo deadlinks --dir target/doc
        # also test minimum dependency versions are usable
        - cargo generate-lockfile -Z minimal-versions
        - cargo test

    - rust: nightly
      os: osx
      env: DESCRIPTION="OSX, nightly, docs"
      install:
        - cargo --list | egrep "^\s*deadlinks$" -q || cargo install cargo-deadlinks
        - cargo deadlinks -V
      script:
        - cargo test
        - cargo test --benches
        - cargo test --examples
        # remove cached documentation, otherwise files from previous PRs can get included
        - rm -rf target/doc
        - cargo doc --no-deps --all --features=std,log
        - cargo deadlinks --dir target/doc
        # also test minimum dependency versions are usable
        - cargo generate-lockfile -Z minimal-versions
        - cargo test

    - rust: nightly
      env: DESCRIPTION="WASM via emscripten, stdweb, wasm-bindgen and WASI"
      install:
        - rustup target add wasm32-unknown-unknown
        - rustup target add wasm32-unknown-emscripten
        - rustup target add wasm32-wasi
        - nvm install 9
        - ./utils/ci/install_cargo_web.sh
        - cargo web prepare-emscripten
        - cargo web -V
        - cargo list | grep install-update || cargo install -f cargo-update
        - cargo install-update -i cargo-update wasm-bindgen-cli wasm-pack
      addons:
        chrome: stable
      script:
        # Testing wasm32-unknown-emscripten fails because of rust-lang/rust#49877
        # However, we can still build and link all tests to make sure that works.
        # This is actually useful as it finds stuff such as rust-random/rand#669
        - EMCC_CFLAGS="-s ERROR_ON_UNDEFINED_SYMBOLS=0" cargo web test --target wasm32-unknown-emscripten --no-run
        #- cargo web test --target wasm32-unknown-emscripten
        #- cargo web test --nodejs --target wasm32-unknown-emscripten
        #- cargo build --target wasm32-unknown-unknown # without any features
        - cargo build --target wasm32-wasi
        - cargo build --target wasm32-unknown-unknown --features=wasm-bindgen
        - cargo web test --target wasm32-unknown-unknown --features=stdweb
        - cargo build --manifest-path tests/wasm_bindgen/Cargo.toml --target wasm32-unknown-unknown
        - wasm-bindgen --nodejs target/wasm32-unknown-unknown/debug/getrandom_wasm_bindgen_test.wasm --out-dir tests/wasm_bindgen/js
        - node tests/wasm_bindgen/js/index.js
        - wasm-pack test --node tests/wasm_bindgen

    - rust: nightly
      env: DESCRIPTION="cross-platform build only"
      # libc on Redox is broken: see https://github.com/rust-lang/libc/pull/1450
      install:
        - rustup target add x86_64-sun-solaris
        - rustup target add x86_64-unknown-cloudabi
        - rustup target add x86_64-unknown-freebsd
        - rustup target add x86_64-fuchsia
        - rustup target add x86_64-unknown-netbsd
        # - rustup target add x86_64-unknown-redox
        - rustup target add x86_64-fortanix-unknown-sgx
        # For no_std targets
        - rustup component add rust-src
        - cargo install cargo-xbuild || true
      script:
        - cargo build --target=x86_64-sun-solaris
        - cargo build --target=x86_64-unknown-cloudabi
        - cargo build --target=x86_64-unknown-freebsd
        - cargo build --target=x86_64-fuchsia
        - cargo build --target=x86_64-unknown-netbsd
        # - cargo build --target=x86_64-unknown-redox
        - cargo build --target=x86_64-fortanix-unknown-sgx
        - cargo xbuild --target=x86_64-unknown-uefi
        - cargo xbuild --target=x86_64-unknown-hermit
        - cargo xbuild --target=x86_64-unknown-l4re-uclibc
        # also test minimum dependency versions are usable
        - cargo generate-lockfile -Z minimal-versions
        - cargo build --target=x86_64-sun-solaris
        - cargo build --target=x86_64-unknown-cloudabi
        - cargo build --target=x86_64-unknown-freebsd
        - cargo build --target=x86_64-fuchsia
        - cargo build --target=x86_64-unknown-netbsd
        # - cargo build --target=x86_64-unknown-redox
        - cargo build --target=x86_64-fortanix-unknown-sgx
        - cargo xbuild --target=x86_64-unknown-uefi
        - cargo xbuild --target=x86_64-unknown-hermit
        - cargo xbuild --target=x86_64-unknown-l4re-uclibc

    # Trust cross-built/emulated targets. We must repeat all non-default values.
    - rust: stable
      sudo: required
      dist: trusty
      services: docker
      env: DESCRIPTION="Linux (MIPS, big-endian)" TARGET=mips-unknown-linux-gnu
      install:
        - sh utils/ci/install.sh
        - source ~/.cargo/env || true
      script:
        - bash utils/ci/script.sh

    - rust: stable
      sudo: required
      dist: trusty
      services: docker
      env: DESCRIPTION="Android (ARMv7)" TARGET=armv7-linux-androideabi
      install:
        - sh utils/ci/install.sh
        - source ~/.cargo/env || true
      script:
        - bash utils/ci/script.sh

  allow_failures:
    # Formatting errors should appear in Travis, but not break the build.
    - env: DESCRIPTION="Rustfmt"

before_install:
  - set -e
  - rustup self update

script:
  - cargo test
  - cargo test --examples

after_script: set +e

cache:
  cargo: true
  directories:
    - .local/share/cargo-web

before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

notifications:
  email:
    on_success: never
